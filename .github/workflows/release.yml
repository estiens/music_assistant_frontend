name: Publish releases

on:
  release:
    types: [published]
env:
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "22.x"
  NODE_OPTIONS: --max_old_space_size=6144

# Set default workflow permissions
# All scopes not mentioned here are set to no access
# https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
permissions:
  actions: none

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.vars.outputs.tag }}
    permissions:
      contents: write # Required to upload release assets
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v5

      - name: Get tag
        id: vars
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn

      - name: Install dependencies
        run: |
          yarn install
          python3 -m pip install build tomli tomli-w

      - name: Set Python project version from tag
        shell: python
        run: |-
          import tomli
          import tomli_w

          with open("pyproject.toml", "rb") as f:
            pyproject = tomli.load(f)

          pyproject["project"]["version"] = "${{ steps.vars.outputs.tag }}"

          with open("pyproject.toml", "wb") as f:
            tomli_w.dump(pyproject, f)

      - name: Build and release package
        run: |
          yarn build
          rm -rf dist music_assistant_frontend.egg-info
          python3 -m build

      - name: Publish release to PyPI
        uses: pypa/gh-action-pypi-publish@v1.13.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}

      - name: Upload release assets
        uses: softprops/action-gh-release@v2.4.1
        with:
          files: |
            dist/*.whl
            dist/*.tar.gz

  server-repo-pr:
    name: Server repo PR
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout server repository
        uses: actions/checkout@v4
        with:
          repository: music-assistant/server
          token: ${{ secrets.PRIVILEGED_GITHUB_TOKEN }}

      - name: Get release notes
        id: release_notes
        run: |
          VERSION="${{ needs.release.outputs.version }}"

          # Get the release notes from the frontend release
          RELEASE_NOTES=$(gh release view "$VERSION" --repo music-assistant/frontend --json body --jq '.body')

          # Save to file and environment for use in PR
          echo "$RELEASE_NOTES" > release_notes.txt

          # Set multiline output
          {
            echo 'notes<<EOF'
            echo "$RELEASE_NOTES"
            echo EOF
          } >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.PRIVILEGED_GITHUB_TOKEN }}

      - name: Update frontend version
        run: |
          VERSION="${{ needs.release.outputs.version }}"

          # Update pyproject.toml
          sed -i.bak "s/music-assistant-frontend==.*/music-assistant-frontend==$VERSION\",/" pyproject.toml

          # Update requirements_all.txt
          sed -i.bak "s/music-assistant-frontend==.*/music-assistant-frontend==$VERSION/" requirements_all.txt

          # Remove backup files
          rm -f pyproject.toml.bak requirements_all.txt.bak

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.PRIVILEGED_GITHUB_TOKEN }}
          commit-message: "⬆️ Update music-assistant-frontend to ${{ needs.release.outputs.version }}"
          branch: "auto-update-frontend-${{ needs.release.outputs.version }}"
          delete-branch: true
          title: "⬆️ Update music-assistant-frontend to ${{ needs.release.outputs.version }}"
          body: |
            Update music-assistant-frontend to version ${{ needs.release.outputs.version }}

            ## Frontend Release Notes

            ${{ steps.release_notes.outputs.notes }}

            ---

            Related frontend release: https://github.com/music-assistant/frontend/releases/tag/${{ needs.release.outputs.version }}
          labels: dependencies
